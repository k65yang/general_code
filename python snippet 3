class Polynomial:
    """ representation of a single variable polynomial class """
     
    def __init__(self, polynomial):
        """ Single polynomial Initilization """
        self._poly = str(polynomial)
         
    def get_derivative(self):
        """ Returns the derivative of the polynomial """
        der_index = self._poly.find("^")
        if der_index == -1:
            if self._poly[-1].isdigit():
                return 0 # if the input is a constant, ie. 400
            else:
                return self._poly[:-1] # if the input is to the power of 1, ie. 2x
 
             
        power = int(self._poly[der_index + 1:])
        var = self._poly[der_index-1]
         
        if self._poly.index(self._poly[der_index-1]) == 0:
            coeff = power # if the input has a coeff of 1, ie. x^2
        elif  self._poly[:der_index - 1] == "-":
            coeff = -power # if the input is neg and has a coeff of 1, ie. -x^2
        else:
            coeff = int(self._poly[:der_index-1])
            coeff *= power # all other cases, ie. 4X^2, -9X^4
         
        power -= 1
        if power == 1:
            # if the derivative as a power of 1, ie. 8X^1
            return str(coeff) + var.lower() 
         
        return str(coeff) + var.lower() + "^" + str(power) # all other cases

def GetSignIndex(poly):
    """
    In order to split a polynomial of multiple terms, the index of the "+" and
    "-" signs are required; they will provide us a location of where to split
    the string to separate the terms.
    """
    Sign_Positive = [i for i in range(len(poly)) if poly.startswith('+', i)]
    Sign_Negative = [i for i in range(len(poly)) if poly.startswith('-', i) and poly[i-1] != "^"] 
    signs = Sign_Positive + Sign_Negative
    signs.sort()
    return signs

def SplitPoly(poly, sign_index):
    """
    Taking the list of the indexes, individual terms may be extracted from the 
    user inputted polynomial function. If there is only one term in the input,
    the resulting list will contain just that term.
    """
    poly_split = []
    poly_split.append(poly[:sign_index[0]])
    for i in range(1, len(sign_index)):
        poly_split.append(poly[sign_index[i-1]:sign_index[i]])
    poly_split.append(poly[sign_index[-1]:])
    while "" in poly_split:
        poly_split.remove("")
    return poly_split
    
def DerivativeList(poly_list):
    """
    Taking the list of split polynomials, the Polynomial class is called to 
    solve for the derivatives.
    """
    der_list = []
    for p in poly_list:
        temp_der = Polynomial(p).get_derivative()
        der_list.append(temp_der)
    while 0 in der_list:
        der_list.remove(0)
    return der_list
    
def CompleteDerivative(der_list):
    """
    This function works to combine the list of the derivatives into a single
    string that just looks better
    """
    output = ""
    for der in der_list:
        if der[0] == "-":
            output += der
        else:
            output = output + "+" + der
    if output[0] == "+":
        output = output[1:]
    return output

if __name__ == "__main__":
    poly = input("Input a polynomial in standard algebraic notation: ")
    poly = str(poly)
    poly = poly.strip()
    poly = poly.replace(" ", "")
         
         
    gsi = GetSignIndex(poly)
    sp = SplitPoly(poly, gsi)
    dl = DerivativeList(sp)
    cd = CompleteDerivative(dl)
     
    print(cd)
